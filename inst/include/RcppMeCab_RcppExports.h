// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RcppMeCab_RCPPEXPORTS_H_GEN_
#define RCPP_RcppMeCab_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace RcppMeCab {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RcppMeCab", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RcppMeCab", "_RcppMeCab_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RcppMeCab");
            }
        }
    }

    inline List posParallelJoinRcpp(std::vector<std::string> text, std::string sys_dic, std::string user_dic) {
        typedef SEXP(*Ptr_posParallelJoinRcpp)(SEXP,SEXP,SEXP);
        static Ptr_posParallelJoinRcpp p_posParallelJoinRcpp = NULL;
        if (p_posParallelJoinRcpp == NULL) {
            validateSignature("List(*posParallelJoinRcpp)(std::vector<std::string>,std::string,std::string)");
            p_posParallelJoinRcpp = (Ptr_posParallelJoinRcpp)R_GetCCallable("RcppMeCab", "_RcppMeCab_posParallelJoinRcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_posParallelJoinRcpp(Shield<SEXP>(Rcpp::wrap(text)), Shield<SEXP>(Rcpp::wrap(sys_dic)), Shield<SEXP>(Rcpp::wrap(user_dic)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline DataFrame posParallelDFRcpp(StringVector text, std::string sys_dic, std::string user_dic) {
        typedef SEXP(*Ptr_posParallelDFRcpp)(SEXP,SEXP,SEXP);
        static Ptr_posParallelDFRcpp p_posParallelDFRcpp = NULL;
        if (p_posParallelDFRcpp == NULL) {
            validateSignature("DataFrame(*posParallelDFRcpp)(StringVector,std::string,std::string)");
            p_posParallelDFRcpp = (Ptr_posParallelDFRcpp)R_GetCCallable("RcppMeCab", "_RcppMeCab_posParallelDFRcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_posParallelDFRcpp(Shield<SEXP>(Rcpp::wrap(text)), Shield<SEXP>(Rcpp::wrap(sys_dic)), Shield<SEXP>(Rcpp::wrap(user_dic)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

    inline List posParallelRcpp(std::vector<std::string> text, std::string sys_dic, std::string user_dic) {
        typedef SEXP(*Ptr_posParallelRcpp)(SEXP,SEXP,SEXP);
        static Ptr_posParallelRcpp p_posParallelRcpp = NULL;
        if (p_posParallelRcpp == NULL) {
            validateSignature("List(*posParallelRcpp)(std::vector<std::string>,std::string,std::string)");
            p_posParallelRcpp = (Ptr_posParallelRcpp)R_GetCCallable("RcppMeCab", "_RcppMeCab_posParallelRcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_posParallelRcpp(Shield<SEXP>(Rcpp::wrap(text)), Shield<SEXP>(Rcpp::wrap(sys_dic)), Shield<SEXP>(Rcpp::wrap(user_dic)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List posApplyRcpp(StringVector text, std::string sys_dic, std::string user_dic) {
        typedef SEXP(*Ptr_posApplyRcpp)(SEXP,SEXP,SEXP);
        static Ptr_posApplyRcpp p_posApplyRcpp = NULL;
        if (p_posApplyRcpp == NULL) {
            validateSignature("List(*posApplyRcpp)(StringVector,std::string,std::string)");
            p_posApplyRcpp = (Ptr_posApplyRcpp)R_GetCCallable("RcppMeCab", "_RcppMeCab_posApplyRcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_posApplyRcpp(Shield<SEXP>(Rcpp::wrap(text)), Shield<SEXP>(Rcpp::wrap(sys_dic)), Shield<SEXP>(Rcpp::wrap(user_dic)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List posApplyJoinRcpp(StringVector text, std::string sys_dic, std::string user_dic) {
        typedef SEXP(*Ptr_posApplyJoinRcpp)(SEXP,SEXP,SEXP);
        static Ptr_posApplyJoinRcpp p_posApplyJoinRcpp = NULL;
        if (p_posApplyJoinRcpp == NULL) {
            validateSignature("List(*posApplyJoinRcpp)(StringVector,std::string,std::string)");
            p_posApplyJoinRcpp = (Ptr_posApplyJoinRcpp)R_GetCCallable("RcppMeCab", "_RcppMeCab_posApplyJoinRcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_posApplyJoinRcpp(Shield<SEXP>(Rcpp::wrap(text)), Shield<SEXP>(Rcpp::wrap(sys_dic)), Shield<SEXP>(Rcpp::wrap(user_dic)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline DataFrame posLoopDFRcpp(StringVector text, std::string sys_dic, std::string user_dic) {
        typedef SEXP(*Ptr_posLoopDFRcpp)(SEXP,SEXP,SEXP);
        static Ptr_posLoopDFRcpp p_posLoopDFRcpp = NULL;
        if (p_posLoopDFRcpp == NULL) {
            validateSignature("DataFrame(*posLoopDFRcpp)(StringVector,std::string,std::string)");
            p_posLoopDFRcpp = (Ptr_posLoopDFRcpp)R_GetCCallable("RcppMeCab", "_RcppMeCab_posLoopDFRcpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_posLoopDFRcpp(Shield<SEXP>(Rcpp::wrap(text)), Shield<SEXP>(Rcpp::wrap(sys_dic)), Shield<SEXP>(Rcpp::wrap(user_dic)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

}

#endif // RCPP_RcppMeCab_RCPPEXPORTS_H_GEN_
